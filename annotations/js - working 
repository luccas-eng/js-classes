Execution context in JS is something like a box or a container or a wrapper wich stores variables and in which a piece of our code is evaluated and executed;

Execution context object:

Variable object:

    1) creation phase
        a. creation od the variable object (VO)
        b. creation of the scope Chain
        c. determine value of the "this" variable
    
    2) execution phase
        a. the code of the function that generated the current execution context is ran line by line
    
    3) variable object
        a. the argument object is created, containing all the arguments that were passed into the function
        b. code is scanned for function declarations: for each function, a property is created in the Variable Object, pointing to the function
        c. code is scanned for variable declarations: for each variable, a property is created in the Variable Object, and set to undefined


Scope Chain:
    a. where can we access a certain variable?
    b. each new function creates a scope: the space/environment in which the variables it defines are accessible
    c. lexical scoping: a function that is lexically within another function gets access to the scope of the outer function


"This" Variable Keyword:
    a. regular function call: the this keyword points at the global object (the window object, in the browser)
    b. method call: the this variable points to the object that is calling the method
    c. the this keyword is not assigned a value until a function where it is defined is actually called
    d. references the object that it is defined


